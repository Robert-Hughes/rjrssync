# This workflow creates a draft 'release' on GitHub, ready to be published by using
# the GitHub web UI. It attches pre-built binaries to the release for easy downloading.
# It needs to be triggered manually using the GitHub web interface.
# It can also optionally upload the source code to crates.io, which is needed for "cargo binstall rjrssync"
# to find the new version. Note that uploading to crates.io cannot be undone and does not have a
# 'draft' concept like GitHub releases do.
# This also means that crates.io uploads need to have a new version number (cannot update existing one)
# which is different to GitHub releases, where we can update existing releases if we want to.

name: Release

on:
  # This workflow is triggered manually
  workflow_dispatch:
    inputs:
      upload_to_crates_io:
        description: |
          Upload the source code to crates.io after creating the GitHub release?
          (THIS CANNOT BE UNDONE!)
        required: true
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  # These first jobs build rjrssync for Windows & Linux and upload the binaries as artifacts,
  # ready to be put into a release in the following job.
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up cross build
      run: |
        rustup target add x86_64-unknown-linux-musl
        rustup target add aarch64-unknown-linux-musl

    - name: Build
      # Build with all supported embedded binaries, so that it can be easily deployed
      run: cargo build --release --features=embed-all -vv

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: binary-windows
        path: target/release/rjrssync.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up cross build
      # mingw-w64 for Linux -> Windows
      run: |
        rustup target add x86_64-pc-windows-gnu
        rustup target add x86_64-unknown-linux-musl
        rustup target add aarch64-unknown-linux-musl
        sudo apt install mingw-w64

    - name: Build
      # Build with all supported embedded binaries, so that it can be easily deployed
      # Do the Linux build with musl, which is more portable
      run: cargo build --release --features=embed-all --target=x86_64-unknown-linux-musl -vv

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: binary-linux
        path: target/x86_64-unknown-linux-musl/release/rjrssync

  # This job creates the release and uploads the binaries built by the first jobs
  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write # Set permissions of the GITHUB_TOKEN to allow creation of a release
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: binary-windows
          path: windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: binary-linux
          path: linux

      - name: Get version number
        id: version
        run: |
          VERSION=$(cargo metadata --no-deps --format-version=1 | jq --raw-output '.packages[0].version')
          echo "VERSION=v$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare artifacts for release
        run: |
          mkdir release-files
          mv linux/rjrssync release-files/rjrssync-${{ steps.version.outputs.VERSION }}-x86_64-unknown-linux-musl
          mv windows/rjrssync.exe release-files/rjrssync-${{ steps.version.outputs.VERSION }}-x86_64-pc-windows-msvc.exe

      - name: Check for existing release tag
        # If there is an existing tag with the name of this new release, then that means we've already made a
        # release with this same name, and so we raise an error to avoid problems.
        # The "softprops/action-gh-release" action we use to make release will happily proceed even if
        # a release with the same name already exists - it will simply update it with the new artifacts,
        # but the tag won't be edited to point at the latest main, so the the artifacts and code in the release
        # would be out-of-sync. This is confusing and so we avoid this by requiring that the tag doesn't already exist.
        # If we want to re-do an existing release, we'd need to delete that release (and tag) from GitHub first.
        run: "! git ls-remote --exit-code origin ${{ steps.version.outputs.VERSION }}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          name: ${{ steps.version.outputs.VERSION }}
          tag_name: ${{ steps.version.outputs.VERSION }}
          files: release-files/*

      # We upload to crates.io as the last step, because this is irreversible whereas the GitHub release
      # is only a draft so can be easily undone.
      - name: Upload source code to crates.io
        if:  ${{ inputs.upload_to_crates_io }}
        env:
          # Use the token saved as a secret in the GitHub repo settings to authenticate ourselves for crates.io
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN  }}
        run: |
          git clean -fd # Remove the artifacts that we uploaded, which will be in the repo directory but we don't want to upload to crates.io
          cargo publish

