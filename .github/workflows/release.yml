# This workflow creates a draft 'release' on GitHub, ready to be published by using
# the GitHub web UI. It attches pre-built binaries to the release for easy downloading.
# It needs to be triggered manually using the GitHub web interface.

name: Release

on:
  # This workflow is triggered manually
  workflow_dispatch

env:
  CARGO_TERM_COLOR: always

jobs:
  # This first job builds rjrssync for Windows & Linux and uploads the binaries as artifacts,
  # ready to be put into a release in the following job.
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up cross build (Linux-only bits)
      if: ${{ runner.os == 'Linux' }}
      # mingw-w64 for Linux -> Windows
      run: sudo apt install mingw-w64

    - name: Set up cross build
      run: |
        rustup target add x86_64-pc-windows-gnu
        rustup target add x86_64-unknown-linux-musl
        rustup target add aarch64-unknown-linux-musl

    - name: Build
      # Build with all supported embedded binaries, so that it can be easily deployed
      run: cargo build --release --features embed-all -vv

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: binary-${{ matrix.os }}
        path: target/release/rjrssync*

  # This second job creates the release and uploads the binaries built by the first job
  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # Set permissions of the GITHUB_TOKEN to allow creation of a release
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: binary-windows-latest
          path: windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: binary-ubuntu-latest
          path: linux

      - name: Get version number
        id: version
        run: |
          VERSION=$(cargo metadata --no-deps --format-version=1 | jq --raw-output '.packages[0].version')
          echo "VERSION=v$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare artifacts for release
        run: |
          mkdir release-files
          mv linux/rjrssync release-files/rjrssync-${{ steps.version.outputs.VERSION }}-x86_64-unknown-linux-gnu
          mv windows/rjrssync.exe release-files/rjrssync-${{ steps.version.outputs.VERSION }}-x86_64-pc-windows-msvc.exe

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          name: ${{ steps.version.outputs.VERSION }}
          tag_name: ${{ steps.version.outputs.VERSION }}
          files: release-files/*
