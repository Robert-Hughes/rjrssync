# This workflow builds and runs unit tests on both Windows and Linux, as well as running
# WSL to test remote connection between OSes.

name: Post-Commit

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      tmate_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'     
        required: false
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  # This job builds and runs unit tests on both Windows and Linux (natively, no WSL).
  # No remote platforms are available for testing, so tests that require that are not run.
  native:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      # Skip tests that require a remote, as this isn't available in this workflow.
      # The "windows-with-wsl" workflow tests remote connection by using WSL.
      run: cargo test --verbose -- --skip "remote_tests::"

  # This job sets up a Windows runner with WSL, so that tests that require remote
  # platforms (e.g. a Linux to Windows sync) can be tested.
  remote_platforms:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - uses: Vampire/setup-wsl@v1

    - name: Setup tmate session for debugging (only if enabled)
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.tmate_enabled }}
      uses: mxschmitt/action-tmate@v3

    - name: Setup SSH server
      shell: pwsh
      run: |
        Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
        Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
        Start-Service -Name "sshd"
    
    - name: Run remote tests on Windows
      # Only run tests that require a remote, as the other tests are covered by the "native" jobs above.
      # The logic in remote_tests.rs should automatically detect the WSL instance and connect to that
      run: cargo test --verbose -- "remote_tests::"

    - name: Run remote tests on WSL
      # Only run tests that require a remote, as the other tests are covered by the "native" jobs above.
      # The logic in remote_tests.rs should automatically detect the Windows host and connect to that
      shell: wsl-bash {0}
      run: cargo test --verbose -- "remote_tests::"

