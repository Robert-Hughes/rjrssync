# This workflow builds and runs unit tests on both Windows and Linux, 
# as well as running WSL to test "remote" launching, connection and syncing between OSes.

name: Post-Commit

on:
  push:
    branches: [ "main", "github-actions" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    # Run the job every night as well to collect more benchmark data, to hopefully be able to 
    # average out inconsistencies and spot definite changes.
    # Note that GitHub will automatically stop running scheduled runs after 60 days of repo inactivity which is good
    - cron:  '19 4 * * *'   # Every day at 4:19am (not on the hour to avoid high load periods)
  # Allow this workflow to be triggered manually, with an optional parameter to enable remote debugging
  workflow_dispatch:
    inputs:
      tmate_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'     
        required: false
        default: false

env:
  CARGO_TERM_COLOR: always
  # Set WSLENV to share some env vars between Windows and WSL
  WSLENV: GITHUB_PATH/p:GITHUB_ENV/p:RJRSSYNC_TEST_REMOTE_USER_AND_HOST_WINDOWS:CARGO_TERM_COLOR:GITHUB_SHA

jobs:
  # This job builds and runs unit tests on both Windows and Linux (natively, no WSL).
  # No remote platforms are available for testing, so tests that require that are not run.
  native:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    # Speed up the following cache step, when _restoring_ the cache (note it actually seems to make it slower when _saving_ the cache!)
    # See: https://github.com/actions/cache/blob/main/tips-and-workarounds.md#improving-cache-restore-performance-on-windows-using-cross-os-caching
    - if: ${{ runner.os == 'Windows' }}
      name: Use GNU tar to speed up caching on Windows
      shell: pwsh
      run: echo "C:\Program Files\Git\usr\bin" >> $env:GITHUB_PATH

    # Cache the cargo registry (in user's home dir) and the rjrssync target folder, to speed up subsequent builds.
    # (see example at https://github.com/actions/cache/blob/main/examples.md#rust---cargo)
    - name: Restore from cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: native-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
    - name: Build
      run: cargo build --verbose --all-targets

    - name: Run tests
      # Skip tests that require a remote, as this isn't available in this environment.
      # The below "remote-platforms" job tests remote connection by using WSL.
      run: cargo test --verbose -- --skip "remote"

    - name: Build (with profiling)
      run: cargo build --verbose --all-targets --features=profiling

  # This job sets up a Windows runner with WSL, so that tests that require remote
  # platforms (e.g. a Linux to Windows sync) can be tested.
  remote-platforms:
    runs-on: windows-2019 # windows-latest (2022) causes rustc to crash the whole VM when run inside WSL

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Setup WSL
      uses: Vampire/setup-wsl@v1 # Note this sets up a WSL 1 (not WSL 2) environment, so network access is slightly different etc.
      with:
        # Customize the WSL shell command to remove "--noprofile" and add "--login", so that cargo will be on the path once it is installed
        # Also remove "-u" to prevent error when running .profile script
        wsl-shell-command: bash --login --norc -eo pipefail
        # curl and ca-certificates: For installing rust
        # build-essential: so that a linker is available when running rustc
        # ssh for both client and server, needed for test environment
        # git and rsync for benchmarks
        additional-packages:
          curl ca-certificates
          build-essential
          ssh
          git
          rsync

    - name: Copy source code to WSL
      # By copying the source code into the native WSL filesystem this is more "faithful" to a proper linux setup, 
      # and should be faster as the build will be done in the linux filesystem, not through the mounted windows one.
      # This also prevents any problems with sharing build folders between Windows and Linux and any caching/overwriting.
      shell: pwsh
      run: Get-ChildItem -Path $env:GITHUB_WORKSPACE -Exclude .git,target | Copy-Item -Destination C:\hostedtoolcache\windows\Debian\1.0.0\x64\rootfs\root\rjrssync -Recurse
      
    # Speed up the following cache step, when _restoring_ the cache (note it actually seems to make it slower when _saving_ the cache!)
    # See: https://github.com/actions/cache/blob/main/tips-and-workarounds.md#improving-cache-restore-performance-on-windows-using-cross-os-caching
    - if: ${{ runner.os == 'Windows' }}
      name: Use GNU tar to speed up caching on Windows
      shell: pwsh
      run: echo "C:\Program Files\Git\usr\bin" >> $env:GITHUB_PATH

    # Cache the Windows and WSL cargo registry (from user's home dir) and the rjrssync target folder (both Windows and WSL),
    # to speed up subsequent builds.
    # (see example at https://github.com/actions/cache/blob/main/examples.md#rust---cargo)
    - name: Restore from cache
      id: cache
      uses: actions/cache@v3
      #TODO: check that cache for WSL rjrssync/target folder here is working (we were mistakenly not using this
      # folder at all before!)
      with:
        path: |
          ~\.cargo\bin\
          ~\.cargo\registry\index\
          ~\.cargo\registry\cache\
          ~\.cargo\git\db\

          C:\hostedtoolcache\windows\Debian\1.0.0\x64\rootfs\root\.cargo\bin\
          C:\hostedtoolcache\windows\Debian\1.0.0\x64\rootfs\root\.cargo\registry\index\
          C:\hostedtoolcache\windows\Debian\1.0.0\x64\rootfs\root\.cargo\registry\cache\
          C:\hostedtoolcache\windows\Debian\1.0.0\x64\rootfs\root\.cargo\git\db\
          
          target\

          C:\hostedtoolcache\windows\Debian\1.0.0\x64\rootfs\root\rjrssync\target\
        key: remote-platforms-cargo-${{ hashFiles('**/Cargo.lock') }}

    # Restoring the WSL rjrssync/target folder from cache messes up with the file metadata - this fixes it
    - name: Fix WSL permissions
      if: steps.cache.outputs.cache-hit == 'true'
      shell: wsl-bash {0}
      run: chmod -R 777 ~/rjrssync/target

    - name: Set up cargo on WSL
      shell: wsl-bash {0}
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

    # Beware that the tmate session runs inside cygwin, so some behaviour doesn't match native windows
    # Note that if this step happens before the "choco install", then we can't manually run choco inside tmate
    # because cygwin messes up the %TEMP% environment variables
    - name: Set up tmate session for debugging (only if enabled)
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.tmate_enabled }}
      uses: mxschmitt/action-tmate@v3

    - name: Test if rustc crashes in wsl
      # It crashes in windows-latest servers!
      shell: wsl-bash {0}
      run: |
        sleep 3 # Make sure log output is visible up to here, before it crashes
        rustc --version
      
    # Can't seem to get the windows OpenSSH server installed, as we get an error when adding the optional package.
    # There is an sshd already installed as part of cygwin, but this means that when we log in we get a cygwin prompt, not a windows prompt
    # So instead we use chocolatey to install a native windows OpenSSH.
    - name: Set up Windows SSH server
      shell: pwsh
      run: |
        choco install openssh --no-progress
        &"C:\Program Files\OpenSSH-Win64\install-sshd.ps1"

        # Add the new ssh installation to the PATH. Even though chocolatey claims to do this based on its log messages,
        # it doesn't seem to actually work. Note that this will only take effect after this current "run" action,
        # but that's fine, as there is an existing SSH installation (in C:\Windows\System32\OpenSSH\) which will work for now.
        # We do need to make sure the newer ssh.exe (at least v8) is used for our actual tests though, as it fixes a bug that causes a hang:
        # https://github.com/PowerShell/Win32-OpenSSH/issues/856
        echo "C:\Program Files\OpenSSH-Win64" >> $env:GITHUB_PATH

        # Start the service so that it creates a default sshd_config file. We'll modify this later.
        Start-Service sshd
        # For debugging, start sshd instead with debug flag so we get logging:
        # Start-Job -WorkingDirectory . -ScriptBlock { & 'C:\Program Files\OpenSSH-Win64\sshd.exe' -ddd }
        # Then use Receive-Job X (where X is the ID reported by the Start-Job command) to get the job output while it runs in the background

        # Remove "Match Group administrators" from bottom of sshd_config so that it uses the normal authorized_keys location,
        # otherwise we get permission problems and can't use the below scripts to fix them.
        $content = Get-Content "C:\ProgramData\ssh\sshd_config"
        $content[0..($content.length-3)] | Out-File "C:\ProgramData\ssh\sshd_config"

        # Disable password authentication, so that if anything goes wrong (e.g. key not installed properly) then we don't hang the job at a password prompt
        echo "PasswordAuthentication no" >> "C:\ProgramData\ssh\sshd_config"

        # Restart sshd so it picks up the config file changes
        Restart-Service sshd

        # Create user key
        mkdir $env:USERPROFILE\.ssh
        ssh-keygen -f $env:USERPROFILE\.ssh\id_rsa -q -N '""'

        # Add user key to authorized_keys, so can login without password
        cp $env:USERPROFILE\.ssh\id_rsa.pub $env:USERPROFILE\.ssh\authorized_keys

        # Disable host key checking so we don't get the prompt
        echo "Host *" > $env:USERPROFILE\.ssh\config
        echo "  StrictHostKeyChecking no" >> $env:USERPROFILE\.ssh\config

        # Fix all the permissions
        &'C:\Program Files\OpenSSH-Win64\FixHostFilePermissions.ps1' -Confirm:$false
        &'C:\Program Files\OpenSSH-Win64\FixUserFilePermissions.ps1' -Confirm:$false

        # Confirm we can login without a password
        ssh localhost "ver && echo Windows to Windows SSH is working"

    # Make sure the correct version of ssh is on the PATH.
    - name: Check ssh version
      shell: pwsh
      run: |
        $env:PATH -split ';'
        ssh -V

    - name: Set up WSL SSH server
      shell: wsl-bash {0}
      run: |
        # Disable password authentication, so that if anything goes wrong (e.g. key not installed properly) then we don't hang the job at a password prompt
        echo "PasswordAuthentication no" >> "/etc/ssh/sshd_config"

        # Make sshd listen only on localhost. By default it listens on all interfaces, but this means that both
        # it and the native Windows sshd will be both listening on all interfaces, which makes it impossible(?)
        # to distinguish which to connect to. For consistency with the way this behaves on WSL 2, tell the WSL
        # sshd to listen just on 127.0.0.1.
        echo "ListenAddress 127.0.0.1" >> "/etc/ssh/sshd_config"

        # Start sshd
        service ssh start

        # Create ssh key
        ssh-keygen -f ~/.ssh/id_rsa -q -N ""
       
        # Disable host key checking so we don't get the prompt
        echo "Host *" > ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        chmod 644 ~/.ssh/config

        # Add user key to authorized_keys, so can login without password
        cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys

        # Confirm we can login without a password
        ssh 127.0.0.1 "uname -a && echo WSL to WSL SSH is working"

    - name: Set up Windows to WSL SSH
      shell: pwsh
      run: |
        wsl bash -c "cat /mnt/c/Users/runneradmin/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys"
        ssh root@127.0.0.1 "uname -a && echo Windows to WSL SSH is working"
      
    - name: Setup WSL to Windows SSH
      shell: wsl-bash {0}
      run: |
        cat ~/.ssh/id_rsa.pub >> /mnt/c/Users/runneradmin/.ssh/authorized_keys
        # Get the IP address to use to connect to Windows SSH. Now that we have both Windows and WSL SSH running, 
        # we need to use the IP address of a different interface than just localhost in order to get the right one
        WINDOWS_IP=$(hostname -I | cut -d ' ' -f1)
        ssh runneradmin@$WINDOWS_IP "ver && echo WSL to Windows SSH is working"

        # Override rjrssync testing automatically detected windows hostname, as it gets it wrong,
        # so we don't need to specify this for all future test executions
        echo "RJRSSYNC_TEST_REMOTE_USER_AND_HOST_WINDOWS=runneradmin@$WINDOWS_IP" >> $GITHUB_ENV

    - name: Create temp folders for remote tests
      shell: pwsh
      run: |
        mkdir ${env:TEMP}\rjrssync-tests
        wsl mkdir /tmp/rjrssync-tests
    
    - name: Run remote tests on Windows
      shell: pwsh
      # Only run tests that require a remote, as the other tests are covered by the "native" jobs above.
      # The logic in remote_tests.rs should automatically detect the WSL instance and connect to that
      # These tests can be resource-intensive (building rjrssync on remote hosts), so run one at a time,
      # and print the test output as they run so can see the progress
      run: cargo test --verbose -- "remote" --test-threads 1 --nocapture

    - name: Run remote tests on WSL
      # Only run tests that require a remote, as the other tests are covered by the "native" jobs above.
      # The logic in remote_tests.rs should automatically detect the Windows host and connect to that (for the most part)
      # These tests can be resource-intensive (building rjrssync on remote hosts), so run one at a time,
      # and print the test output as they run so can see the progress.
      # Note we use the copy of the source code on the native Linux filesystem, not the one in the Github actions workspace
      # via /mnt/... (so that it's faster and more faithful to a 'proper' linux setup)
      shell: wsl-bash {0}
      run: cd ~/rjrssync && cargo test --verbose -- "remote" --test-threads 1 --nocapture

    # TODO: expand to more samples?

    - name: Run benchmarks on Windows
      shell: pwsh
      run: cargo bench -- -n 1 --json-output benchmark-results-windows-$(Get-Date -Format "yyyy-MM-dd-HH-mm")-$env:GITHUB_SHA.json

    - name: Run benchmarks on WSL
      shell: wsl-bash {0}      
      # Note we use the copy of the source code on the native Linux filesystem, not the one in the Github actions workspace
      # via /mnt/... (so that it's faster and more faithful to a 'proper' linux setup)
      run: |
        cargo bench --manifest-path ~/rjrssync/Cargo.toml -- -n 1 --json-output benchmark-results-wsl-$(printf '%(%Y-%m-%d-%H-%M)T')-${GITHUB_SHA}.json
        # Copy the json output to the workspace, where we can upload it from
        cp ~/rjrssync/benchmark-results-* .

    - name: Upload benchmark results (Windows + WSL)
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results-*

  # Artifacts aren't saved forever, so we commit the results to a special (independent) branch of the repo.
  commit-benchmark-results:
    # Only do this for stuff already merged to main - we don't want the benchmark results history to include pull requests for example
    if: ${{ github.ref == 'refs/heads/github-actions' }} #TODO: change this to main!
    needs: remote-platforms
    runs-on: ubuntu-latest
    steps:
      - name: Checkout default branch (for scripts)
        uses: actions/checkout@v3

      - name: Checkout benchmark-results branch into subfolder
        uses: actions/checkout@v3
        with:
          ref: benchmark-results
          path: benchmark-results

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results
        
      - name: Commit to benchmark-results branch
        run: |
          cd benchmark-results
          git config --global user.name "CI (GitHub Actions)"
          git config --global user.email "no-reply@github.com"
          git add benchmark-results-*
          git commit -m "Benchmark results for $GITHUB_SHA"
          git push

      - name: Generate graphs
        run: .github/workflows/generate-benchmark-graphs.py --json-files benchmark-results/ --output-html graphs.html

      #TODO: publish the HTML file onto github pages - I don't think we need to check it in anywhere,
      # can use https://github.com/actions/upload-pages-artifact to publish it directly (which is good cos this is a generated file so better not to check in)