[package]
name = "rjrssync"
version = "0.1.0"
edition = "2021"
default-run = "rjrssync"

[dependencies]
clap = { version = "4.0", features = ["derive"] }
env_logger = "*"
log="*"
rust-embed = { version = "=6.4.2", features = [ "debug-embed", "include-exclude" ] } # debug-embed Otherwise the behaviour is different in debug vs release builds
tempdir="*"
walkdir="*"
serde = { version = "1.0", features = ["derive"] }
serde_bytes = "=0.11.7"
bincode = "1.2.1"
filetime = "*"
regex = "1"
aes-gcm = "0.10.1"
aead = {version = "0.5.1", features = ["bytes"]}
base64 = "*"
yaml-rust = "0.4.5"
lazy_static = "1.4.0"
bytes = "=1.3.0"
const_format = "=0.2.30"
indicatif = "=0.17.2"
dialoguer = "=0.10.2"
winapi = { version = "=0.3.9", features=["psapi"] }
crossbeam = "=0.8.2"

# Profiling-only dependencies
json = { version = "0.12.4", optional = true }

# Dependencies needed for tests/benchmarks, which aren't needed for building on a remote
#if NonRemote
tempfile = "=3.3.0"
map-macro = "=0.2.4"
network-interface = "=0.1.5"
fs_extra = "=1.2.0"
ascii_table = "=4.0.2"
#end

[features]
profiling=["dep:json"]

# Note this is orthogonal to the profiling _feature_, and is for including symbols in a release build so that an
# external profiling tool can be used.
[profile.profiling]
inherits = "release"
debug = 1

[[bin]]
name = "rjrssync"
bench = false # Prevent from being run as a benchmark when running "cargo bench"

#if NonRemote
[[bench]]
name = "benchmarks"
harness = false

[[example]]
name = "piper"
bench = false # Prevent from being run as a benchmark when running "cargo bench"

[[example]]
name = "tcper"
bench = false # Prevent from being run as a benchmark when running "cargo bench"

#end