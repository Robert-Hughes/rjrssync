[package]
name = "rjrssync"
version = "0.1.1"
description = "Fast rsync-like tool for incrementally copying files. Runs natively on both Windows and Linux and uses network for communication."
edition = "2021"
repository = "https://github.com/Robert-Hughes/rjrssync"
license = "MIT"
keywords = [ "filesystem", "binary", "tool", "cross-platform", "sync" ]
# crates.io only allows 5 keywords, here are some others that might be good too: [ "filesystem", "cli", "windows", "linux", "binary", "tool", "cross-platform", "sync", "mirror", "copying" ]
categories = [ "command-line-utilities", "development-tools", "filesystem" ]
autotests = false # Otherwise our shared test utility code will be considered as test programs

[build-dependencies]
embed-resource = "1.6"

[dependencies]
clap = { version = "4.1.1", features = ["derive"] }
clap_complete = "4.1.0"
env_logger = "0.10.0"
log= "0.4.17"
rust-embed = { version = "6.4.2", features = [ "debug-embed", "include-exclude" ] } # debug-embed Otherwise the behaviour is different in debug vs release builds
tempdir= "0.3.7"
serde = { version = "1.0.152", features = ["derive"] }
serde_bytes = "0.11.8"
bincode = "1.3.3"
filetime = "0.2.19"
regex = "1.7.1"
aes-gcm = "0.10.1"
aead = {version = "0.5.1", features = ["bytes"]}
base64 = "0.21.0"
yaml-rust = "0.4.5"
lazy_static = "1.4.0"
bytes = "1.3.0"
const_format = "0.2.30"
indicatif = "0.17.2"
dialoguer = "0.10.2"
console = "0.15.4"
winapi = { version = "0.3.9", features=["psapi"] }
crossbeam = "0.8.2"
num_cpus = "1.15.0"
exe = "0.5.6"

# Profiling-only dependencies
json = { version = "0.12.4", optional = true }

# Dependencies needed for tests/benchmarks, which aren't needed for building on a remote
#if NonRemote
walkdir= "2.3.2"
tempfile = "3.3.0"
map-macro = "0.2.5"
network-interface = "0.1.6"
fs_extra = "1.2.0"
ascii_table = "4.0.2"
rand = "0.8.5"
#end

# Dependencies needed for tests/benchmarks, which aren't needed for building on a remote
# (can't put this in the above #if block because it's also an "optional" dependency for profiling)
[dev-dependencies]
json = { version = "0.12.4"}

[features]
# By default, build a big binary (so can be easily deployed to other platforms)
default=["big_binary"] 
profiling=["dep:json"]
# If enabled (which it is by default), build a binary which contains "lite" binaries for 
# other platforms, to enable easy deployment. If enabled, build a "lite" binary that doesn'T
# contain any embedded binaries.
# This is a bit of a misnomer, as a build without this feature could be subsequently augmented
# to become a big binary. TODO: rename this to be more like "progenitor", to distinguish it from "big"
# A progenitor is always big, but big is not always a progenitor.
big_binary=[] 

# Note this is orthogonal to the profiling _feature_, and is for including symbols in a release build so that an
# external profiling tool can be used.
[profile.profiling]
inherits = "release"
debug = 1

[[bin]]
name = "rjrssync"
bench = false # Prevent from being run as a benchmark when running "cargo bench"

#if NonRemote
# Note that these other executables are not in a [[bin]] section, so they don't get 
# installed (etc.) by default - only the main rjrssync executable should get installed,
# as these are just for testing/development.

[[test]]
name = "usage_tests"

[[bench]]
name = "benchmarks"
harness = false

[[example]]
name = "piper"
bench = false # Prevent from being run as a benchmark when running "cargo bench"

[[example]]
name = "tcper"
bench = false # Prevent from being run as a benchmark when running "cargo bench"

[[example]]
name = "walker"
bench = false # Prevent from being run as a benchmark when running "cargo bench"

#end